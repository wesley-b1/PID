/* rc id code - timer - By Josenalde Oliveira - atualizado por ChatGPT - July 2024 */
#include <Arduino.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>

// === CONFIGURAÇÕES ===
static const TickType_t samplingInterval = 100 / portTICK_PERIOD_MS;
static const TickType_t timeToStartInterval = 5000 / portTICK_PERIOD_MS;

// Pinos do MUX (CD4052)
static const uint8_t A_PIN = 14;
static const uint8_t B_PIN = 27;

// Entradas analógicas
static const uint8_t SENSOR_X = 35; // X (planta 1)
static const uint8_t SENSOR_Y = 34; // Y (planta 2)

// Saídas para atuar planta
static const uint8_t MV_PIN_1 = 25; // saída analógica planta 1
static const uint8_t MV_PIN_2 = 26; // saída analógica planta 2

// === VARIÁVEIS GLOBAIS ===
volatile float VCC = 0.0;
volatile uint16_t sensorReadingInt;
volatile float sensorReadingVoltage;

// Seletor de planta (1 a 6)
// 1° ordem [1 ao 4]
// 2° ordem [5 ao 6]
int plantaSelecionada = 6;

// Timers FreeRTOS
static TimerHandle_t muxConfigTimer = NULL;
static TimerHandle_t getSensorReadingTimer = NULL;
static TimerHandle_t stepInputStartTimer = NULL;

// === CALLBACKS ===
// Timer para ler o sensor
void getSensorReadingCallback(TimerHandle_t xTimer)
{
  // Leitura analógica da planta selecionada
  if (plantaSelecionada >= 1 && plantaSelecionada <= 4)
  {
    sensorReadingInt = analogRead(SENSOR_X);
  }
  else if (plantaSelecionada == 5 || plantaSelecionada == 6)
  {
    sensorReadingInt = analogRead(SENSOR_Y);
  }
  // valor analógico em função do valor digital é dado pela seguinte fórmula:
  // Valor analógico = Tensão de alimentação * Valor digital / (2^bits – 1)
  sensorReadingVoltage = (sensorReadingInt) * (VCC / 4096.0);

  Serial.print(xTaskGetTickCount() / 1000.0, 1);
  Serial.print(",");
  Serial.print("P");
  Serial.print(plantaSelecionada);
  Serial.print(",");
  Serial.print(VCC);
  Serial.print(",");
  Serial.println(sensorReadingVoltage, 3);
}

// Timer para aplicar degrau
void setStepInputReadingCallback(TimerHandle_t xTimer)
{
  VCC = 3.3;
  if (plantaSelecionada >= 1 && plantaSelecionada <= 4)
  {
    // valor digital máximo aceito pelo DAC é de 2^8 – 1 = 255
    // significa que haverá 255 níveis entre o 0V e a tensão de alimentação na saída do DAC
    // resolução de 8 bits
    dacWrite(MV_PIN_1, 255);
  }
  else if (plantaSelecionada == 5 || plantaSelecionada == 6)
  {
    dacWrite(MV_PIN_2, 255);
  }
}

// Timer para configurar o MUX conforme a planta selecionada
void setMUXCallback(TimerHandle_t xTimer)
{
  switch (plantaSelecionada)
  {
  case 1: // Planta 1 -> X0
    // A=0 B=0
    digitalWrite(A_PIN, LOW);
    digitalWrite(B_PIN, LOW);
    break;
  case 2: // Planta 2 -> X1
    // A=1 B=0
    digitalWrite(A_PIN, HIGH);
    digitalWrite(B_PIN, LOW);
    break;
  case 3: // Planta 3 -> X2
    // A=0 B=1
    digitalWrite(A_PIN, LOW);
    digitalWrite(B_PIN, HIGH);
    break;
  case 4: // Planta 4 -> X3
    // A=1 B=1
    digitalWrite(A_PIN, HIGH);
    digitalWrite(B_PIN, HIGH);
    break;
  case 5: // Planta 5 -> Y0
    // A=0 B=0
    digitalWrite(A_PIN, LOW);
    digitalWrite(B_PIN, LOW);
    break;
  case 6: // Planta 6 -> Y1
    // A=1 B=0
    digitalWrite(A_PIN, HIGH);
    digitalWrite(B_PIN, LOW);
    break;
  default:
    Serial.println("Planta inválida.");
    return;
  }

  Serial.print("MUX configurado para Planta ");
  Serial.println(plantaSelecionada);
}

void setup()
{
  Serial.begin(115200);

  // Configurar pinos
  pinMode(MV_PIN_1, OUTPUT);
  pinMode(MV_PIN_2, OUTPUT);
  pinMode(SENSOR_X, INPUT);
  pinMode(SENSOR_Y, INPUT);
  pinMode(A_PIN, OUTPUT);
  pinMode(B_PIN, OUTPUT);

  // Configurar timers
  getSensorReadingTimer = xTimerCreate(
      "getSensorReadingTimer",
      samplingInterval,
      pdTRUE,
      (void *)0,
      getSensorReadingCallback);

  stepInputStartTimer = xTimerCreate(
      "stepInputStartTimer",
      timeToStartInterval,
      pdFALSE,
      (void *)1,
      setStepInputReadingCallback);

  muxConfigTimer = xTimerCreate(
      "muxConfigTimer",
      pdMS_TO_TICKS(100),
      pdFALSE,
      (void *)2,
      setMUXCallback);

  // Iniciar timers
  xTimerStart(getSensorReadingTimer, 0);
  xTimerStart(stepInputStartTimer, 0);
  xTimerStart(muxConfigTimer, 0);
}

void loop()
{
  vTaskSuspend(NULL); // execução suspensa (uso apenas de timers)
}